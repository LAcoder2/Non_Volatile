
Module MainModule
    
    '**************************************************************************
    'twinBASIC XLL UDF Demo v1.0.1
    'by Jon Johnson
    'https://github.com/fafalone/TBXLLUDF
    'Based on the Generic example from the Excel SDK
    '
    '
    'This is the main module containing the UDFs and event handlers.
    'The full Excel SDK and helper functions based on the Framework example
    'are in ExcelSDK.twin. 
    ' (17 Dec 2024) Version 1.0.2 - Bug fix for (unused in this project) SDK
    '       helper functions.
    ' (16 Dec 2024) Version 1.0.1 - Initial release
    '**************************************************************************

    Private xUDFNames() As XL12Ptr, UDFCount As Long
    [DllExport]
    Function xlAutoOpen() As Long
        Dim FuncName As String
        Dim xDLL As XLOPER12
        
        FetchExcel12EntryPt()
        ' pExcel12p xlcAlert, , 2, GetXL12Str("Welcome to the tB XLL UDF Demo!"), GetXLInt12(1)
        pExcel12 xlGetName, 0, ByVal 0, xDLL
        
        ReDim xUDFNames(5)
        
        ' FuncName = "TBXLLUDF_NumberName"
        ' Excel12UDFRegistration xDLL, _
        '     /*Procedure     */ FuncName, _ 
        '     /*type_text     */ "UU", _
        '     /*function_text */ FuncName, _
        '     /*argument_text */ "Number to name", _
        '     /*macro_type    */ "1", _
        '     /*category      */ "tB XLL UDF Add-In", _
        '     /*shortcut_text */ , _
        '     /*help_topic    */ , _
        '     /*function_help */ "Returns the text name of a number, e.g. 1 to One", _
        '     /*argument1 help*/ "The number to name " '
        FuncName = "TBXLLUDF_GetType"
        Excel12UDFRegistration xDLL, _
                                FuncName, _ 
                                "UU", _
                                FuncName, , _
                                "1", , , , , _
                                vbNullString
        FuncName = "TBXLLUDF_VbaCallback"
        Excel12UDFRegistration(xDLL, _
                                FuncName, _ 
                                "UUQQQQ", _
                                FuncName, _
                                "reference,rowOff,colOff,heigth,width", _
                                "1", _
                                "tB XLL UDF Add-In", _
                                "", _
                                "", _
                                "Adds the arguments", _                        
                                "arguments_help")
        
        FuncName = "Offset_nv"
        ' MsgBox "OFFSET2 регистрация: " & '_
        Excel12UDFRegistration(xDLL, _
                                FuncName, _ 
                                "UUQQQQ#", _
                                "OFFSET2", _
                                "reference, rowOff, colOff, heigth, width", _
                                "1", _
                                "tB XLL Non-Volatile Add-In", _
                                "", _
                                "Не волатильный аналог функции СМЕЩ/OFFSET", _
                                "Adds the arguments", _                        
                                "arguments_help")
        ' { L"FuncSum",
        ' L "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", // up to 255 args in Excel 2007 And later,
        '                                    // upto 29 args in Excel 2003 And earlier versions
        ' L "FuncSum",
        ' L "number1,number2,...",
        ' L "1",
        ' L "Generic Add-In",
        ' L "",
        ' L "",
        ' L "Adds the arguments",
        ' L "Number1,number2,... are 1 to 29 arguments for which you want to sum."
        ' },
        
        ' FuncName = "XllEcho"
        ' Excel12UDFRegistration xDLL, FuncName, "QQ", FuncName, "Anything"
        
        FuncName = "XllEchoA"
        Excel12UDFRegistration(xDLL, FuncName, ">QX", FuncName, "Anything")
        
        pExcel12 xlFree, 1, VarPtr(xDLL)
        
        RegisterEvent_CalculationEnded
        
        Return 1
    End Function
    [DllExport]
    Private Function Excel12UDFRegistration(xDll As XLOPER12, ParamArray params() As Variant) As Excel4ReturnCodes
        Dim funcdef() As XL12Ptr, i&, Ub&
        Dim lret As Excel4ReturnCodes, xDummy As XL12Num
        
        Ub = UBound(params)
        ReDim funcdef(Ub + 1)
        
        Copy32 funcdef(0), xDll
        For i = 0 To Ub
            funcdef(i + 1) = GetXL12StrPtr(CStr(params(i)))
        Next
                
        lret = pExcel12v(xlfRegister, xDummy, Ub + 1, funcdef)
        If lret = xlretSuccess Then
            Ub = UBound(xUDFNames)
            If Ub < UDFCount Then
                ReDim Preserve xUDFNames(UDFCount)
            End If
            xUDFNames(UDFCount) = funcdef(1)
            UDFCount += 1
        End If
        ' MsgBox lret
        Excel12UDFRegistration = lret
    End Function
    [DllExport]
    Private Sub UDFUnregister(UDFName As String)
        pExcel12p xlfSetName, ByVal 0, 1, GetXL12Str(UDFName) 'byval 0 on the stack looks like ByVal vbNullPtr
    End Sub
    [DllExport]
    Function xlAutoClose() As Long
        Dim i&
        
        For i = 0 To UBound(xUDFNames)
            pExcel12p xlfSetName, ByVal 0, 1, xUDFNames(i)
        Next
        
        Return 1
    End Function
    'Return the long name of the addin
    [DllExport]
    Function xlAddInManagerInfo12(xAction As XLOPER12) As LongPtr 'lpXLOPER12 
        Static xInfo As XL12Ptr
        Dim xIntAction As XL12Int
        
        pExcel12p xlCoerce, xIntAction, 2, xAction, GetXL12Int(xltypeInt)
        
        If xIntAction.lVal = 1 Then
            If xInfo.ptr Then Else _
                xInfo = GetXL12StrPtr("tB XLL Add-in")
        Else
            xInfo.xltype = xltypeErr
            xInfo.ptr = xlerrValue
        End If
                
        Return VarPtr(xInfo)
    End Function
    
    'Define our UDFs:     
    ' [DllExport]
    ' Function TBXLLUDF_NumberName(xInp As XLOPER12) As LongPtr 'LPXLOPER12
    '     Static xResult As XL12Ptr
    '     Dim llNum As LongLong, error As XloperErrorCodes
        
    '     error = XLOPER12ToLongLong(xInp, llNum)
        
    '     If (error <> -1) AndAlso (llNum <= 0) Then
    '         xResult.xltype = xltypeErr
    '         xResult.ptr = error
    '         Return VarPtr(xResult)
    '     End If
        
    '     xResult = GetXL12StrPtr(ConvertNumberToText(CStr(llNum)))
        
    '     Return VarPtr(xResult)
    ' End Function
    
    '/#/#/#/#/#/#/#/#/#/#/#/#/-UDF GetType-/#/#/#/#/#/#/#/#/#/#/#/#/#/    
    [DllExport]
    Function TBXLLUDF_GetType(xlIn As XL12Int) As LongPtr 'LPXLOPER12        
        
        xlIn = GetXL12Int(xlIn.xltype)
        
        Return VarPtr(xlIn)
    End Function
    
    '/#/#/#/#/#/#/#/#/#/#/#/#/-UDF VBACallBack-/#/#/#/#/#/#/#/#/#/#/#/#/#/
    Private Delegate Function VBACallBack_Deleg (Optional ByVal lp0 As LongPtr, Optional ByVal lp1 As LongPtr, Optional ByVal lp2 As LongPtr, Optional ByVal lp3 As LongPtr, Optional ByVal lp4 As LongPtr) As LongPtr
    Private VBACallBack As VBACallBack_Deleg
    [DllExport] 'Registering a vba callback function
    Sub VbaCallbackRegister(ByVal fnAddr As VBACallBack_Deleg)
        If fnAddr > 0 Then VBACallBack = fnAddr
    End Sub
    [DllExport] 'A transit function that redirects a call to an external function registered from the vba host.
    Function TBXLLUDF_VbaCallback(ByVal lp0 As LongPtr, ByVal lp1 As LongPtr, ByVal lp2 As LongPtr, ByVal lp3 As LongPtr, ByVal lp4 As LongPtr) As LongPtr 'LPXLOPER12
        Static xResult As XL12Ptr
        Dim dNum As Double, error As XloperErrorCodes
        
        If VBACallBack Then
        Else
            xResult = GetXL12StrPtr("Missing registered Callback function")
            xResult.xltype = xltypeStr Or xlbitDLLFree
            Return VarPtr(xResult)
        End If
        
        Return VBACallBack(lp0, lp1, lp2, lp3, lp4)
    End Function
    
    '########################Async/Multithread UDF Example##########################
    'Sorce - 
    ' LPXLOPER12 WINAPI XllEcho(LPXLOPER12 oper)
    ' {
    '     // Simulate a long operation.
    '     Sleep(1000);

    '     if (oper->xltype & xltypeNum)
    '         oper->val.num *= 2;
    '     return oper;
    ' }
    [DllExport]'Example of a simple synchronous UDF
    Function XllEcho(oper As XLOPER12) As LongPtr
        Dim dNum As Double, lerror As XloperErrorCodes
        
        Sleep 1000          '// Simulate a long operation.
        
        If oper.xltype And xltypeNum Then
            PutDbl(oper) = GetDbl(oper) * 2
        Else
            lerror = XLOPER12ToDobule(oper, dNum)
            If lerror = -1 Then
                PutDbl(oper) = dNum
            Else
                oper.xltype = xltypeErr
                oper.val = lerror
            End If
        End If
        
        Return VarPtr(oper)
    End Function
    ' void WINAPI XllEchoA(LPXLOPER12 oper, LPXLOPER12 asyncHandle)
    ' {
    '     // Point to the arguments from a pointer array that will be freed by 
    '     // XllEchoSetReturn.
    '     LPXLOPER12* argsArray = new LPXLOPER12[2];
    '     if (argsArray == NULL)
    '     {
    '         AsyncStubFailHelper(asyncHandle);
    '         return;
    '     }

    '     argsArray[0] = TempOper12(oper);
    '     if (argsArray[0] == NULL)
    '     {
    '         delete argsArray;
    '         AsyncStubFailHelper(asyncHandle);
    '     }
    '     argsArray[1] = TempOper12(asyncHandle);
    '     if (argsArray[1] == NULL)
    '     {
    '         xlAutoFree12(argsArray[0]);
    '         delete argsArray;
    '         AsyncStubFailHelper(asyncHandle);
    '     }

    '     // Simulate an external async operation-start a thread and return.
    '     if (CreateThread(NULL, 0, XllEchoSetReturn, argsArray, 0, NULL) == NULL)
    '     {
    '         xlAutoFree12(argsArray[1]);
    '         xlAutoFree12(argsArray[0]);
    '         delete argsArray;
    '         AsyncStubFailHelper(asyncHandle);
    '     }
    ' }
    [DllExport] 'Example of a thread-safe asynchronous UDF
    Sub XllEchoA(oper As XLOPER12, asyncHandle As XLOPER12)
'         // Point to the arguments from a pointer array that will be freed by 
'         // XllEchoSetReturn.
        'LPXLOPER12* argsArray = new LPXLOPER12[2];
        Dim argsArray() As XLOPER12 'LPXLOPER12
        Dim pSAargs As LongPtr
        
        ReDim argsArray(1)
        argsArray(0) = oper         'argsArray[0] = TempOper12(oper);
        argsArray(1) = asyncHandle  'argsArray[1] = TempOper12(asyncHandle);        
        
        '// Simulate an external async operation-start a thread and return.        
        MovePtr(pSAargs, argsArray) 'transferring memory ownership to a thread function
        If CreateThread(ByVal vbNullPtr, 0, AddressOf XllEchoSetReturn, ByVal pSAargs, 0, ByVal 0) = 0 Then
            MsgBox "The thread did not start"
            pExcel12 xlFree, 1, VarPtr(oper)
            AsyncStubFailHelper asyncHandle
        End If
        ' BeepApi 850, 400
        Exit Sub
    End Sub
    ' DWORD WINAPI XllEchoSetReturn(LPVOID args)
    ' {
    '     LPXLOPER12* opers = (LPXLOPER12*)args;
    '     XLOPER12 xlResult;

    '     // Simulate waiting for a long external operation.
    '     Sleep(1000);
    '     if (opers[0]->xltype & xltypeNum)
    '         opers[0]->val.num *= 2;

    '     int retval = Excel12(xlAsyncReturn, &xlResult, 2, opers[1], opers[0]);

    '     // Free the passed pointer array
    '     // (Excel itself calls xlAutoFree12 to free the XLOPERs, since they have 
    '     // xlbitDLLFree).  
    '     delete opers;

    '     ExitThread(0);
    '     return 0;
    ' }
    Function XllEchoSetReturn(ByVal pSAargs As LongPtr) As Long
        Dim xResult As XLOPER12, opers() As XLOPER12, pArgs() As LongPtr
        Dim dNum As Double, lerror As XloperErrorCodes, retval As Long
        
        PutPtr(opers) = pSAargs 'taking ownership of transferred memory
        
        Sleep 1000            '// Simulate waiting for a long external operation.
        
        With opers(0)
            If .xltype And xltypeNum Then
                PutDbl(.val) = GetDbl(.val) * 2
            Else
                lerror = XLOPER12ToDobule(opers(0), dNum)
                If lerror = -1 Then
                    PutDbl(.val) = dNum * 2
                Else
                    .xltype = xltypeErr
                    .val = lerror
                End If
            End If
        End With
        
        ' CType(Of Multip_Deleg)(AddressOf Multip)(pArgs(0))
        
        retval = pExcel12p(xlAsyncReturn, xResult, 2, opers(1), opers(0))
        ' retval = pExcel12p(xlAsyncReturn, xResult, 2, ByVal pArgs(1), ByVal pArgs(0))
        ' Erase opers       'Just in case, you can clear the data before exiting the stream.
        ' ExitThread(0)
    End Function
    
    ' Private Sub TestMultipDeleg()
    '     Dim xNum As XLOPER12
    '     xNum.xltype = xltypeInt
    '     PutLng(xNum) = 100
    '     CType(Of Multip_Deleg)(AddressOf Multip)(VarPtr(xNum))
    ' End Sub
    ' Private Delegate Sub Multip_Deleg (ByVal pxNum As LongPtr)
    ' Private Sub Multip(xNum As XLOPER12)
    '     Dim lerror As XloperErrorCodes
    '     Dim dNum As Double
        
    '     With xNum
    '         If .xltype And xltypeNum Then
    '             dNum = GetDbl(.val)
    ' '           PutDbl(.val) = dNum * 2
    '         Else
    '             lerror = XLOPER12ToDobule(xNum, dNum)
    '             If lerror = -1 Then
    '                 PutDbl(.val) = dNum * 2
    '             Else
    '                 .xltype = xltypeErr
    '                 .val = lerror
    '                 MsgBox "error!"
    '             End If
    '       End If
    '     End With
    ' End Sub
    
    'https://github.com/wasgsd/dev/blob/4c6139ad431bb56ce91e080e76062b604f5c9e4f/DDxll/DDxll.cpp
    ' //void AsyncStubFailHelper(LPXLOPER12 asyncHandle)
    ' //{
    ' //    //an error handler with no heap/thread operations.  
    ' //    //used to send back #VALUE! when an async stub fails
    ' //    XLOPER12 operResult;
    ' //
    ' //    XLOPER12 operErr;
    ' //    operErr.xltype = xltypeErr;
    ' //    operErr.val.err = xlerrValue;
    ' //
    ' //    Excel12(xlAsyncReturn, &operResult, 2, asyncHandle, &operErr);
    ' //}
    Sub AsyncStubFailHelper(asyncHandle As XLOPER12)
        '//an error handler With no heap/thread operations.  
        '//used to send back #VALUE! when an async stub fails
        Dim operResult As XLOPER12
        Dim operErr As XL12Int
        
        operErr.xltype = xltypeErr
        operErr.lVal = xlerrValue
        
        pExcel12p(xlAsyncReturn, operResult, 2, asyncHandle, operErr)
    End Sub
    
    Private Sub Excel12UDFRegistration2(xDll As XL12Ptr, Procedure$, Optional type_text$, Optional function_text$, _
                                        Optional argument_text$, Optional macro_type$, Optional category$, Optional shortcut_text$, _
                                        Optional help_topic$, Optional function_help$, Optional arguments_help As Variant)
        Dim i&, CntArgs&, isArr As Boolean, funcdef() As XL12Ptr
        If Not IsMissing(arguments_help) Then
            isArr = IsArray(arguments_help)
            If isArr Then
                CntArgs = UBound(arguments_help) + 1
            Else: CntArgs = 1
            End If
        End If
        ReDim funcdef(9 + CntArgs)
        funcdef(0) = xDll
        funcdef(1) = GetXL12StrPtr(Procedure)
        funcdef(2) = GetXL12StrPtr(type_text)
        funcdef(3) = GetXL12StrPtr(function_text)
        funcdef(4) = GetXL12StrPtr(argument_text)
        funcdef(5) = GetXL12StrPtr(macro_type)
        funcdef(6) = GetXL12StrPtr(category)
        funcdef(7) = GetXL12StrPtr(shortcut_text)
        funcdef(8) = GetXL12StrPtr(help_topic)
        funcdef(9) = GetXL12StrPtr(function_help)
        If CntArgs Then
            If isArr Then
                For i = 0 To CntArgs - 1
                    funcdef(10 + i) = GetXL12StrPtr(CStr(arguments_help(i)))
                Next
            Else
                funcdef(10) = GetXL12StrPtr(CStr(arguments_help))
            End If
        End If
        Dim lret As Long, xDummy As XL12Num
        lret = pExcel12v(xlfRegister, xDummy, 10 + CntArgs, funcdef)
        ' MsgBox lret
    End Sub
    
End Module
